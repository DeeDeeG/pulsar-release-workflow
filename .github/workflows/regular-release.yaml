name: Automated Regular Release

on:
  workflow_dispatch:

env:
  # Variables needed
  nextPulsarVersion: "null" # Set by 'findNextPulsarVersion' script
  releasePrLink: "null" # Set via CLI in 'Create GitHub Pull Request'
  binaryDir: "pulsar-bins" # The directory that should contain finalized binaries

jobs:
  tag-new-release:
    runs-on: ubuntu-latest
    steps:
    - name: Setup NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: latest

    - name: Checkout this Repository
      uses: actions/checkout@v4

    - name: Install this repositories dependencies
      run: npm install

    - name: Setup Git User
      run: echo "TODO" # Stuff & Things?? TODO

    - name: Clone the pulsar-edit/pulsar repository
      run: git clone https://github.com/pulsar-edit/pulsar pulsar

    - name: Find new Version
      run: |
        node ./findNextPulsarVersion \
          --packageLocation "pulsar/package.json" \
          --envVarOutput "nextPulsarVersion"

    - name: Create new branch under new version
      run: git switch -c v${{ env.nextPulsarVersion }}-release origin/master

    - name: Remove 'package.json' version build identifier
      run: node ./removeDevFromVersion --packageLocation "pulsar/package.json"

    - name: Bump Pulsar Version
      run: npm version minor
      working-directory: pulsar

    - name: Commit changes
      run: git commit -m "Update Version"

    - name: Tag changes
      run: git tag v${{ env.nextPulsarVersion }}

    - name: Push Branch to Remote
      run: git push -u origin v${{ env.nextPulsarVersion }}-release

    - name: Create GitHub Pull Request
      run: |
        gh pr create \
          --title "v${{ env.nextPulsarVersion }} Release" \
          --body "Automated Regular Release" >> $env:releasePrLink

    - name: Push tag to remote
      run: git push origin v${{ env.nextPulsarVersion }}

  manage-bins:
    runs-on: ubuntu-latest
    needs: tag-new-release
    steps:
    - name: Setup NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: latest

    - name: Checkout this Repository
      uses: actions/checkout@v4

    - name: Install this repositories dependencies
      run: npm install

    - name: Setup Git User
      run: echo "TODO" # Stuff & Things?? TODO

    - name: Download bins as they become available
      run: |
        node ./downloadBinsWhenPossible \
          --saveLoc ${{ env.binaryDir }} \
          --releasePrLink ${{ env.releasePrLink }} \
          --githubAuthToken ${{ SECRETS.TODO }} \
          --tag v${{ env.nextPulsarVersion }}

    - name: Move all bins into the top level directory
      # Since the binaries are downloaded into sub folders based on category
      # we first need to move them all up into the current directory
      run: mv */* .
      working-directory: ${{ env.binaryDir }}

    - name: Delete all empty subdirectories (Which all should be)
      run: find . -type d -empty -delete
      working-directory: ${{ env.binaryDir }}

    - name: Generate SHASUMS file
      run: sha256sum * | tee SHA256SUMS.txt
      working-directory: ${{ env.binaryDir }}

  publish-bins:
    runs-on: ubuntu-latest
    needs: manage-bins
    steps:
    - name: Setup NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: latest

    - name: Checkout this Repository
      uses: actions/checkout@v4

    - name: Install this repositories dependencies
      run: npm install

    - name: Setup Git User
      run: echo "TODO" # Stuff & Things?? TODO

    - name: Create Release & Upload all Bins
      run: |
        node ./createReleaseAndUploadBins \
          --binLoc ${{ env.binaryDir }} \
          --version v${{ env.nextPulsarVersion }} \
          --githubAuthToken ${{ SECRETS.TODO }}

  cleanup:
    runs-on: ubuntu-latest
    needs: publish-bins
    steps:
    - name: Setup NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: latest

    - name: Checkout this Repository
      uses: actions/checkout@v4

    - name: Install this repositories dependencies
      run: npm install

    - name: Setup Git User
      run: echo "TODO" # Stuff & Things?? TODO

    - name: Clone the pulsar-edit/pulsar repository
      run: git clone https://github.com/pulsar-edit/pulsar pulsar

    - name: Checkout the release branch
      run: git fetch v${{ env.nextPulsarVersion }}-release

    - name: Switch to the release branch
      run: git checkout v${{ env.nextPulsarVersion }}-release

    - name: Add 'package.json' build identifier
      run: |
        node ./addDevToVersion \
          --packageLocation "pulsar/package.json"

    - name: Commit these changes
      run: git commit -m "Add back build identifier"

    - name: Push Branch to Remote
      run: git push -u origin v${{ env.nextPulsarVersion }}-release

    # TODO Do we want to auto-close the PR created?
